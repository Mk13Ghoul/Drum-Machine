{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","id","bird","url","DrumPad","props","audio","useRef","useEffect","document","addEventListener","handleKeydown","window","focus","removeEventListener","event","keyCode","charCodeAt","current","play","time","className","onClick","ref","src","styles","StyleSheet","container","display","flexWrap","justifyContent","alignItems","App","useState","sound","setSound","handleClick","style","letterTransform","map","pad","i","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAGMA,G,MAAO,CACX,CACEC,GAAI,IACJC,KAAM,QACNC,IAAK,yCAEP,CACEF,GAAI,IACJC,KAAM,SACNC,IAAK,iEAEP,CACEF,GAAI,IACJC,KAAM,QACNC,IAAK,yDAEP,CACEF,GAAI,IACJC,KAAM,YACNC,IACE,kHAEJ,CACEF,GAAI,IACJC,KAAM,YACNC,IACE,yGAEJ,CACEF,GAAI,IACJC,KAAM,OACNC,IACE,yGAEJ,CACEF,GAAI,IACJC,KAAM,cACNC,IACE,qGAEJ,CACEF,GAAI,IACJC,KAAM,mBACNC,IACE,sGAEJ,CACEF,GAAI,IACJC,KAAM,SACNC,IAAK,uEAIHC,EAAU,SAAAC,GACd,IAAMC,EAAQC,iBAAO,MAErBC,qBAAU,WAIR,OAHAC,SAASC,iBAAiB,UAAWC,GACrCC,OAAOC,QAEA,kBAAMJ,SAASK,oBAAoB,UAAWH,OAGvD,IAAMA,EAAgB,SAAAI,GACpB,OAAIA,EAAMC,UAAYX,EAAMJ,GAAGgB,eAC7BX,EAAMY,QAAQC,OACdb,EAAMY,QAAQE,KAAO,EACdf,EAAMM,kBAYjB,OACE,yBAAKU,UAAU,WAAWpB,GAAII,EAAMJ,GAAIqB,QAPtB,SAAAP,GAGlB,OAFAT,EAAMY,QAAQC,OACdb,EAAMY,QAAQE,KAAO,EACdf,EAAMiB,YAKVjB,EAAMJ,GACP,2BAAOsB,IAAKjB,EAAOe,UAAU,OAAOG,IAAKnB,EAAMF,IAAKF,GAAII,EAAMJ,OAkDpE,IAAMwB,EAAUC,WAAa,CAC3BC,UAAW,CACTC,QAAS,OACTC,SAAU,OACVC,eAAgB,SAChBC,WAAY,WAIDC,EAzCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAGPC,EAAc,SAAAlC,GAClBiC,EAASjC,IAGX,OACE,yBAAKmC,MAAOZ,EAAOE,WAEjB,yBAAK1B,GAAG,gBACN,yBAAKA,GAAG,QACN,4BAAQA,GAAG,UAAUoC,MAAO,CAAEC,gBAAiB,eAC5CJ,IAGL,yBAAKG,MAAOZ,EAAOE,WAChB3B,EAAKuC,KAAI,SAACC,EAAKC,GAAN,OACR,kBAAC,EAAD,CACEC,IAAKF,EAAIvC,GAAKwC,EACdxC,GAAIuC,EAAIvC,GACRE,IAAKqC,EAAIrC,IACTQ,cAAe,kBAAMyB,EAAYI,EAAItC,OACrCoB,QAAS,kBAAMc,EAAYI,EAAItC,gBClHzByC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASyC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f48e62f2.chunk.js","sourcesContent":["import React, { useState, StyleSheet, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst data = [\n  {\n    id: \"Q\",\n    bird: \"quail\", // ορτύκι\n    url: \"http://www.naturesongs.com/quail1.wav\"\n  },\n  {\n    id: \"W\",\n    bird: \"waxing\", // ...\n    url: \"http://www.birds-of-denmark.dk/Sounds/Bombycilla.garrulus.wav\"\n  },\n  {\n    id: \"E\",\n    bird: \"eagle\", //\n    url: \"http://www.falknatur.se/sound/Hieraaetus.pennatus.wav\"\n  },\n  {\n    id: \"A\",\n    bird: \"albatross\",\n    url:\n      \"https://www.vogelstimmen.info/Vogelstimmen_GRATIS/Schwarzbrauenalbatros_Diomedea_melanophris_R_AMPLE-E0114.mp3\"\n  },\n  {\n    id: \"S\",\n    bird: \"sandpiper\",\n    url:\n      \"https://www.vogelstimmen.info/Vogelstimmen_GRATIS/Terekwasserlaeufer_Xenus_cinereus_G_AMPLE-E0574.mp3\"\n  },\n  {\n    id: \"D\",\n    bird: \"dove\",\n    url:\n      \"https://www.vogelstimmen.info/Vogelstimmen_GRATIS/Turteltaube_Streptopelia_turtur_G_AMPLE-E07651R.mp3\"\n  },\n  {\n    id: \"Z\",\n    bird: \"zebra-finch\",\n    url:\n      \"https://www.vogelstimmen.info/Vogelstimmen_GRATIS/Zebrafink_Taeniopygia_guttata_AMPLE-814752D.mp3\"\n  },\n  {\n    id: \"X\",\n    bird: \"star-wars-x-wing\",\n    url:\n      \"https://www.vogelstimmen.info/Vogelstimmen_GRATIS/Wespenbussard_Pernis_apivorus_R_AMPLE-E0348R.mp3\"\n  },\n  {\n    id: \"C\",\n    bird: \"canary\",\n    url: \"http://www.animal-sounds.org/Air/Canary%20trills%20animals011.wav\"\n  }\n];\n\nconst DrumPad = props => {\n  const audio = useRef(null);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeydown);\n    window.focus();\n\n    return () => document.removeEventListener(\"keydown\", handleKeydown);\n  });\n\n  const handleKeydown = event => {\n    if (event.keyCode === props.id.charCodeAt()) {\n      audio.current.play();\n      audio.current.time = 0;\n      return props.handleKeydown();\n    } else {\n      return true;\n    }\n  };\n\n  const handleClick = event => {\n    audio.current.play();\n    audio.current.time = 0;\n    return props.onClick();\n  };\n\n  return (\n    <div className=\"drum-pad\" id={props.id} onClick={handleClick}>\n      {props.id}\n      <audio ref={audio} className=\"clip\" src={props.url} id={props.id}></audio>\n    </div>\n  );\n  // (\n  //   <div className=\"drum-pad\" id={props.id}>\n  //     <button className=\"drum-pads\" id={props.id} onClick={handleClick}>\n  //       {props.id}\n  //     </button>\n  //     <audio\n  //       ref={audio}\n  //       className=\"clip\"\n  //       src={props.url}\n  //       id={props.id}\n  //     ></audio>\n  //   </div>\n  // );\n};\n\nfunction App() {\n  const [sound, setSound] = useState(\"\");\n\n  const handleClick = bird => {\n    setSound(bird);\n  };\n\n  return (\n    <div style={styles.container}>\n      {/* <h1>Drum machine</h1> */}\n      <div id=\"drum-machine\">\n        <div id=\"dspl\">\n          <strong id=\"display\" style={{ letterTransform: \"capitalize\" }}>\n            {sound}\n          </strong>\n        </div>\n        <div style={styles.container}>\n          {data.map((pad, i) => (\n            <DrumPad\n              key={pad.id + i}\n              id={pad.id}\n              url={pad.url}\n              handleKeydown={() => handleClick(pad.bird)}\n              onClick={() => handleClick(pad.bird)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst styles = (StyleSheet = {\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}